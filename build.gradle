plugins {
    id 'java'
    id 'idea'
    id 'flint-steel' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '8.0.0'
    id 'org.cadixdev.licenser' version '0.6.1'
}
apply plugin: 'maven-publish'

group 'net.flintloader'
version = "${minecraft_version}-${version_major}.${version_minor}.${version_patch}"

steel {
    accessWidenerPath = file("src/main/resources/flint-core.accesswidener")
}

repositories {
    mavenCentral()
    maven {
        url = "https://maven.flintloader.net/releases"
        name = "Flint Releases"
    }
    maven {
        url = "https://maven.flintloader.net/mirror"
        name = "Flint Mirror"
    }
    maven {
        url = "https://maven.firstdarkdev.xyz/releases"
        name = "FDD Maven"
    }
}

configurations {
    shaded
    implementation {
        extendsFrom shaded
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings steel.officialMojangMappings()
    modImplementation "net.flintloader:punch:${punch}"

    shaded "me.hypherionmc.moon-config:core:${moon_config}"
    shaded "me.hypherionmc.moon-config:toml:${moon_config}"

    compileOnly "org.projectlombok:lombok:${lombok}"
    annotationProcessor "org.projectlombok:lombok:${lombok}"

    testCompileOnly "org.projectlombok:lombok:${lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok}"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact remapJar
        }
    }

    repositories {
        maven {
            url System.getenv("MAVEN_URL")
            credentials {
                username System.getenv("MAVEN_USER")
                password System.getenv("MAVEN_PASS")
            }
        }
    }
}

shadowJar {
    from sourceSets.main.output

    configurations = [project.configurations.shaded]
    dependencies {
        relocate "me.hypherionmc.moonconfig", "net.flintloader.libs.moonconfig"
    }

    setArchiveClassifier('dev-shadow')
}

remapJar {
    inputFile.set shadowJar.archiveFile.get()
    dependsOn(shadowJar)

    setArchiveClassifier('')
}

prepareRemapJar.dependsOn(shadowJar)

license {
    header = file('HEADER')

    // Apply special license header to matching source files
    matching(includes: ['net/flintloader/**/resources/**', 'net/flintloader/**/screens/**']) {
        header = file('licenses/FABRIC_HEADER')
    }
}

processResources {
    def buildProps = project.properties.clone()

    filesMatching("flintmodule.json") {
        expand buildProps
    }
}